/*
 * interface3.cc
 *
 *  Created on: Dec 2, 2016
 *      Author: nasa
 */



//CPP
#include <unistd.h>
#include <cstdlib>
#include <cstdio>
#include <sstream>
#include <iostream>
#include <vector>
#include <ortos/ortos.h>
#include <cmat/cmat.h>
#include <thread>
#include <atomic>
#include <mutex>
#include <ros/ros.h>
#include <control_baxter/roc.h>

#include "command_consoleAPI.h"
#include "hri_control_Class.hpp"


using std::cout;
using std::endl;
using std::vector;

std::atomic_int atom_arm { 0 };
std::atomic_bool atom_checkResp { false };
std::mutex _lock;

void goal_reached_thread()
{
	int ret;
	ortos::Task* task = ortos::Task::GetInstance();
	task->SetSampleTime(10 * ortos::constants::oneMillisecond);

	ret = task->CreateSync("Goal_Reached_thread");

	ortos::DebugConsole::Write(ortos::LogLevel::info, "thread", "Task created");
	if (ret != ORTOS_RV_OK) {
		ortos::DebugConsole::Write(ortos::LogLevel::error, "thread", "Error creating the task");
		task->Exit();
	}
	ortos::xcom::XCOMInterface* xcom = ortos::xcom::XCOMInterface::GetInstance();
	CTRL::ControllerInterface ctrlInterface;

	while (task->Continue()) {
		if (atom_checkResp) {
			if (ctrlInterface.IsGoalReached(atom_arm)) {
				atom_checkResp = false;
				_lock.lock();
				std::cout << tc::yel << "Arm [" << ortosdata::armInt2Str.at(atom_arm) << "] Goal Reached!" << tc::none << std::endl;
				_lock.unlock();
			}
		}
		task->WaitPeriod();
	}
}

/**
 * Node main function
 */
int main(int argc, char **argv)
{
	ros::init(argc, argv, "API_HRI_CONTROL");
	ros::NodeHandle nh;

	int ret,ret_l,ret_r;
	ortos::Task* task = ortos::Task::GetInstance();
	task->SetSampleTime(CTRL::RateDefines::TaskPeriodMillis * ortos::constants::oneMillisecond);
	ret = task->CreateAsync("DUAL_ARM_CONSOLE");
	ortos::DebugConsole::Write(ortos::LogLevel::info, "main", "Task created");
	if (ret != ORTOS_RV_OK) {
		ortos::DebugConsole::Write(ortos::LogLevel::error, "main", "Error creating the task");
		task->Exit();
	}
	ortos::xcom::XCOMInterface* xcom = ortos::xcom::XCOMInterface::GetInstance();
	CTRL::ControllerInterface ctrlInterface;
	ortosdata::DataHelper odh;

	hri_control_Class obj_hri_control;// initializing control_hri class

	ortosdata::Vector6Container l_wTt_v6Ctr, r_wTt_v6Ctr;
	CMAT::Vect6 l_wTt_v6, r_wTt_v6;
	//CMAT::Vect6 l_wTg_v6, r_wTg_v6;
	//CMAT::Vect6 v6goal;

	CMAT::Vect6 L_psi_, R_psi_;
	CMAT::TransfMatrix l_wTt, r_wTt, l_wTg, r_wTg;

	bool taskCompleted = false, running = false;
	unsigned int iter = 0;
	int arm;

	ortosdata::BoolContainer l_cmd, r_cmd;
	l_cmd.d = false;
	r_cmd.d = false;

	/* hri commands
	ret = xcom->Subscribe(ortosdata::topicnames::goalReachedHRI+ "/left", l_cmd);
	if (ret != ORTOS_RV_OK) {
		ortos::DebugConsole::Write(ortos::LogLevel::error, "main", "Error while subscribing to the goalReachedHRI Left Arm");
	}
	ret = xcom->Subscribe(ortosdata::topicnames::goalReachedHRI+ "/right", r_cmd);
		if (ret != ORTOS_RV_OK) {
			ortos::DebugConsole::Write(ortos::LogLevel::error, "main", "Error while subscribing to the goalReachedHRI Right Arm");
		}
*/

	bool error_check=0;
	const int No_Gripper=2;
	bool GripperFlag[No_Gripper];
	bool HoldModeFlag[No_Gripper];
	bool stopArmFlag[No_Gripper];

	long double sysTime[No_Gripper];
	long double sysTimeMS[No_Gripper];
	long double sysTimeGripper[No_Gripper];
	long double sysTimeMSGripper[No_Gripper] ;
	int ack_counter[No_Gripper];
	unsigned long int counter1=0;
	//unsigned int iter = 0;
	//int arm;

	for (int mm=0;mm<No_Gripper;mm++)
	{	GripperFlag[mm]=true;
		HoldModeFlag[mm]=true;
		stopArmFlag[mm]=true;
		sysTime[mm]=0;sysTimeMS[mm]=0; sysTimeGripper[mm]=0;sysTimeMSGripper[mm]=0 ;
		ack_counter[mm]=0;
	}

	std::string input;
	ortosdata::CommandType cmdRecvd;
	std::vector<double> cmdValues;
	double jointValsArr[ortosdata::numJoints], cartValsArray[6];
	CTRL::CtrlMode ctrlMode;

	CommandConsole::ParsRet parsRetVal;
	CommandConsole console;
	std::thread grt(goal_reached_thread);

	/// Facility sleep, just to get the console output printed after all the ortostask-related prints
	std::this_thread::sleep_for(std::chrono::seconds(1));

	console.PrintCommandList();

	 double qErrThresh_hri=0.001*10, angErrThresh_hri=4 * M_PI / 180.0, linErrThresh_hri=0.01*2;
	 bool flag=0;

	 ros::Rate loop_rate(100);

	while (ros::ok() &&  !taskCompleted && task->Continue()) {
		counter1++;

		xcom->Synchronize();
		if (obj_hri_control.cmnd_recived_flag==false)
		{
			obj_hri_control.cmnd_recived_flag=true;


			input=obj_hri_control.hri_control_msg;
			cout<<"Input: "<<input<<endl;

			parsRetVal = console.ParseInput(input, cmdRecvd, arm, cmdValues, ctrlMode);
			if (parsRetVal == CommandConsole::ParsRet::Ok) {

				_lock.lock();
				cout << tc::grnL << "Command Read: '" << ortosdata::CommandNames.at(cmdRecvd);
				cout << "', arm: '" << ortosdata::armInt2Str.at(arm) << "', values: [";
				FUTILS::PrintSTLVector(cmdValues, ',');
				cout << " ]" << tc::none << endl;
				_lock.unlock();

				if (cmdValues.size() != 0) {
					atom_checkResp = true;
					atom_arm = arm;
				}

				console.SendCommand(cmdRecvd, arm, cmdValues, ctrlMode);

				if (arm<No_Gripper &&
						(cmdRecvd==ortosdata::CommandType::openGrip || cmdRecvd==ortosdata::CommandType::closeGrip))
				{
					GripperFlag[arm]=false;
					sysTimeGripper[arm]=time(0);
					sysTimeMSGripper[arm]=sysTimeGripper[arm]*1000;
				}
				if ( cmdRecvd==ortosdata::CommandType::holdMode)
				{
					HoldModeFlag[arm]=false;
					sysTimeGripper[arm]=time(0);
					sysTimeMSGripper[arm]=sysTimeGripper[arm]*1000;
				}
				if ( cmdRecvd==ortosdata::CommandType::stopArm){
					stopArmFlag[arm]=false;
					sysTimeGripper[arm]=time(0);
					sysTimeMSGripper[arm]=sysTimeGripper[arm]*1000;
				}

				obj_hri_control.hri_control_cmnd_flag[arm]=false;
				cout<<"************** 1 ****** "<<endl;
				obj_hri_control.publish_hri_control_cmnd(arm);
				ack_counter[arm]=counter1+5;
				obj_hri_control.cmdValues_hri_control(cmdRecvd, arm,cmdValues);

		} else if (input == "help") {
				_lock.lock();
				console.PrintCommandList();
				_lock.unlock();
		} else {
				_lock.lock();
				cout << tc::red << "Error Parsing: " << console.ParsRetNames.at(parsRetVal) << tc::none << endl;
				_lock.unlock();
				obj_hri_control.publish_hri_control_cmnd(100);// 100: initialization
		}
	}
/*
	odh.ReadArm_wTt(l_wTt_v6Ctr, "/left");
	odh.ReadArm_wTt(r_wTt_v6Ctr, "/right");
	l_wTt_v6.CopyFrom(l_wTt_v6Ctr.d.data);
	r_wTt_v6.CopyFrom(r_wTt_v6Ctr.d.data);

	l_wTt = l_wTt_v6.Vect2TmatrixEsa();
	r_wTt = r_wTt_v6.Vect2TmatrixEsa();

	L_psi_ = CMAT::CartError( l_wTg,l_wTt  );
	R_psi_ = CMAT::CartError( r_wTg,r_wTt);


	 if ((L_psi_.GetFirstVect3().Norm(2) < angErrThresh_hri)
					&& (L_psi_.GetSecondVect3().Norm(2) < linErrThresh_hri))
			{
				flag = 1;
			}
*/
/*!
 * Acknowledge manager
 */
		//! left arm hold mode command manager
		if (counter1>ack_counter[0] && HoldModeFlag[0]==false ){
			sysTime[0]=time(0);
			sysTimeMS[0]=sysTime[0]*1000;//! msec

			//! time difference
			if((sysTimeMS[0]-sysTimeMSGripper[0])>100){
				HoldModeFlag[0]=true;
				obj_hri_control.publish_hri_control_ack(0);
			}
		}

		//! right arm hold mode command manager
		if (counter1>ack_counter[1] && HoldModeFlag[1]==false ){
			sysTime[1]=time(0);
			sysTimeMS[1]=sysTime[1]*1000;//! msec

			//! time difference to change hold mode
			if((sysTimeMS[1]-sysTimeMSGripper[1])>100){
				HoldModeFlag[1]=true;
				obj_hri_control.publish_hri_control_ack(1);
			}
		}

		//! left stop arm command manager
		if (counter1>ack_counter[0] && stopArmFlag[0]==false ){
			sysTime[0]=time(0);
			sysTimeMS[0]=sysTime[0]*1000;//! msec

			//! time difference
			if((sysTimeMS[0]-sysTimeMSGripper[0])>100){
				stopArmFlag[0]=true;
				obj_hri_control.publish_hri_control_ack(0);
			}
		}

		//! right stop arm command manager
		if (counter1>ack_counter[1] && stopArmFlag[1]==false ){
			sysTime[1]=time(0);
			sysTimeMS[1]=sysTime[1]*1000;//! msec

			//! time difference to change hold mode
			if((sysTimeMS[1]-sysTimeMSGripper[1])>100){
				stopArmFlag[1]=true;
				obj_hri_control.publish_hri_control_ack(1);
			}
		}

		//! left gripper command manager
		else if (counter1>ack_counter[0] && GripperFlag[0]==false){
			sysTime[0]=time(0);
			sysTimeMS[0]=sysTime[0]*1000;// msec

			//! time to close or open gripper
			if((sysTimeMS[0]-sysTimeMSGripper[0])>800){
				GripperFlag[0]=true;
				obj_hri_control.publish_hri_control_ack(0);
			}
		}

		//! left gripper command manager
		else if(counter1>ack_counter[1] && GripperFlag[1]==false){
			sysTime[1]=time(0);
			sysTimeMS[1]=sysTime[1]*1000;//! msec

			// time to close or open gripper
			if((sysTimeMS[1]-sysTimeMSGripper[1])>800){
				GripperFlag[1]=true;
				obj_hri_control.publish_hri_control_ack(1);
			}
		}

		else
		{

			if( counter1>ack_counter[0] && obj_hri_control.hri_control_ack_flag[0]==false)
			{
				arm=0;
				error_check= obj_hri_control.goal_error_hri_control(cmdRecvd, arm);

				if (error_check==true)
					obj_hri_control.publish_hri_control_ack(arm);
				loop_rate.sleep();
			}

			if( counter1>ack_counter[1] && obj_hri_control.hri_control_ack_flag[1]==false)
			{
				arm=1;
				error_check= obj_hri_control.goal_error_hri_control(cmdRecvd, arm);
				if (error_check==true)
					obj_hri_control.publish_hri_control_ack(arm);
				loop_rate.sleep();
			}
		}


		ros::spinOnce();
		//task->WaitPeriod();
	}
	xcom->Release();
	task->Exit();
	return 0;
}

